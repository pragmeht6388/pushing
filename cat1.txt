.AddLogging(builder => builder.AddSerilog(new LoggerConfiguration()    
  .WriteTo.Logger(l => l
    .Filter.ByExcluding(e => e.Level != LogEventLevel.Warning && e.Level != LogEventLevel.Error)        
    .WriteTo.File(path: "Logs/information.txt", rollingInterval: RollingInterval.Day, shared: true))
    .WriteTo.File("Logs/log.txt", rollingInterval: RollingInterval.Day)
    .MinimumLevel.Information()        
    .CreateLogger()))


The behavior of 'LoggerSinkConfiguration.File(string, [LogEventLevel], [string], [IFormatProvider], [long?], [LoggingLevelSwitch], [bool], [bool], [TimeSpan?], [RollingInterval], [bool], [int?], [Encoding], [FileLifecycleHooks], [TimeSpan?])' could vary based on the current user's locale settings. Provide a value for the 'IFormatProvider' argument.


For improved performance, use the LoggerMessage delegates instead of calling 'LoggerExtensions.LogDebug(ILogger, string?, params object?[])'

logger.LogDebug("Starting the file copy scheduler");



Method '<top-level-statements-entry-point>' passes a literal string as parameter 'value' of a call to 'void Console.WriteLine(string? value)'. Retrieve the following string(s) from a resource table instead: "Upload failed, uploaded successfully".

Console.WriteLine(fileUpload.Value ? "uploaded successfully" : "Upload failed");
