..

public static async Task<U> PostAsync<T, U>(this HttpClient client, string actionName, T inputObject)
{
    _logger.Debug("PostAsync method called. With 3 paramters.");
    var json = JsonConvert.SerializeObject(inputObject);
    var requestUrl = new Uri(client.BaseAddress.AbsoluteUri + @"/" + actionName);

    var http = (HttpWebRequest)WebRequest.Create(requestUrl);
    http.Proxy = new WebProxy();
    http.Accept = "application/json";
    http.ContentType = "application/json";
    http.Method = "POST";

    string parsedContent = json;
    ASCIIEncoding encoding = new ASCIIEncoding();
    byte[] bytes = encoding.GetBytes(parsedContent);

    Stream newStream = await http.GetRequestStreamAsync();
    newStream.Write(bytes, 0, bytes.Length);
    newStream.Close();

    var response = await http.GetResponseAsync();

    var stream = response.GetResponseStream();
    var sr = new StreamReader(stream);
    var content = await sr.ReadToEndAsync();
    _logger.Debug($"Post Async log for raw resposne {content}");
    var responseObject = JsonConvert.DeserializeObject<U>(content);
    _logger.Debug("PostAsync method call completed");
    return responseObject;
}

public static async Task<U> PostAsync<T, U>(this HttpClient client, string actionName, T inputObject)
{
    _logger.Debug("PostAsync method called. With 3 parameters.");

    // Serialize the input object to JSON
    var json = JsonConvert.SerializeObject(inputObject);
    var requestUrl = new Uri(client.BaseAddress.AbsoluteUri + @"/" + actionName);

    // Create the HttpContent with the JSON payload
    var content = new StringContent(json, Encoding.UTF8, "application/json");

    // Send the POST request asynchronously
    var response = await client.PostAsync(requestUrl, content);

    // Read the response content
    var responseContent = await response.Content.ReadAsStringAsync();

    // Log the raw response
    _logger.Debug($"Post Async log for raw response: {responseContent}");

    // Deserialize the response content to the expected result type
    var responseObject = JsonConvert.DeserializeObject<U>(responseContent);

    _logger.Debug("PostAsync method call completed");
    return responseObject;
}


Await WriteAsync instead.
