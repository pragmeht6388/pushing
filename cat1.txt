[HttpGet("UserInformation/{userId}")]
public DataTransferObject.User UserInformation(int userId, [FromHeader(Name = "Authorization")] string jwtToken)
{
    _log.Info("UserInformation method called.");
    var phone = HttpContext.User.FindFirstValue("phone_number");
    var adfsIssuer = Utilities.GetAppConfig<string>(Constants.AdfsIssuer);
    var openiddictIssuer = Utilities.GetAppConfig<string>(Consts.MY_OPENIDDICT_ISS);

    DataTransferObject.User userInformation = null;

    try
    {
        dynamic user = Helper.GetUserFromClaims(User.Identity).ToDynamic();
        var role = ((string)user.Role).ToUpperInvariant();

        if (user.issuer == adfsIssuer)
        {
            userInformation = HandleAdfsUser(user, role);
        }
        else if (user.issuer == openiddictIssuer)
        {
            userInformation = HandleOpenIddictUser(user, phone, role, jwtToken);
        }
    }
    catch (ArgumentNullException argEx)
    {
        _log.Warn(argEx, "ArgumentNullException in UserInformation.");
        HandleException(userId, argEx, out userInformation);
    }
    catch (InvalidOperationException invalidOpEx)
    {
        _log.Warn(invalidOpEx, "InvalidOperationException in UserInformation.");
        HandleException(userId, invalidOpEx, out userInformation);
    }
    catch (Security.SecurityTokenException secTokenEx)
    {
        _log.Warn(secTokenEx, "SecurityTokenException in UserInformation.");
        HandleException(userId, secTokenEx, out userInformation);
    }
    catch (Exception ex)
    {
        _log.Error(ex, "Unexpected exception in UserInformation.");
        throw; // Rethrow to avoid swallowing unexpected exceptions
    }

    _log.Info("UserInformation method call completed.");
    return userInformation;
}
