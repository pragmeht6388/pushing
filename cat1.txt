   public static async Task<U> PostAsync<T, U>(this HttpClient client, string actionName, T inputObject)
   {
       _logger.Debug("PostAsync method called. With 3 paramters.");
       var json = JsonConvert.SerializeObject(inputObject);
       var requestUrl = new Uri(client.BaseAddress.AbsoluteUri + @"/" + actionName);

       var http = (HttpWebRequest)WebRequest.Create(requestUrl);
       http.Proxy = new WebProxy();
       http.Accept = "application/json";
       http.ContentType = "application/json";
       http.Method = "POST";

       string parsedContent = json;
       ASCIIEncoding encoding = new ASCIIEncoding();
       byte[] bytes = encoding.GetBytes(parsedContent);

       Stream newStream = await http.GetRequestStreamAsync();
       newStream.Write(bytes, 0, bytes.Length);
       newStream.Close();

       var response = await http.GetResponseAsync();

       var stream = response.GetResponseStream();
       var sr = new StreamReader(stream);
       var content = await sr.ReadToEndAsync();
       _logger.Debug($"Post Async log for raw resposne {content}");
       var responseObject = JsonConvert.DeserializeObject<U>(content);
       _logger.Debug("PostAsync method call completed");
       return responseObject;
   }

Await WriteAsync instead.

public static async Task<U> PostAsync<T, U>(this HttpClient client, string actionName, T inputObject)
{
    _logger.Debug("PostAsync method called. With 3 parameters.");
    var json = JsonConvert.SerializeObject(inputObject);
    var requestUrl = new Uri(client.BaseAddress.AbsoluteUri + @"/" + actionName);

    // Create HttpWebRequest instead of HttpClient for custom behavior
    var http = (HttpWebRequest)WebRequest.Create(requestUrl);
    http.Proxy = new WebProxy();
    http.Accept = "application/json";
    http.ContentType = "application/json";
    http.Method = "POST";

    string parsedContent = json;
    ASCIIEncoding encoding = new ASCIIEncoding();
    byte[] bytes = encoding.GetBytes(parsedContent);

    // Write request data asynchronously
    using (Stream requestStream = await http.GetRequestStreamAsync())
    {
        await requestStream.WriteAsync(bytes, 0, bytes.Length);
    }

    // Get response asynchronously
    var response = await http.GetResponseAsync();
    
    // Use a stream to read the response body, this will allow handling large content or files
    using (var stream = response.GetResponseStream())
    using (var memoryStream = new MemoryStream())
    {
        // Copy the response stream to memory stream
        await stream.CopyToAsync(memoryStream);

        // Assuming the content is JSON, deserialize into the expected object
        memoryStream.Seek(0, SeekOrigin.Begin); // Reset the memory stream position
        var content = Encoding.UTF8.GetString(memoryStream.ToArray());

        _logger.Debug($"Post Async log for raw response {content}");

        // Deserialize the response content into the expected type
        var responseObject = JsonConvert.DeserializeObject<U>(content);

        _logger.Debug("PostAsync method call completed");
        return responseObject;
    }
}

