 public async Task<dynamic> GetCashFlowSavings(int quoteId, string jwtToken, int countryId)
 {
     _logger.Debug("CalculateCashFlowSavings method called");
     try
     {
         var quote = QuotationDataService.GetQuotation(quoteId, countryId);
         var qttPerquiste = QuotationDataService.GetQTTInformation(QuoteConstants.PERQUISTE);
         var QuoteDatas = QuotationDataService.GetQuoteData(quoteId).ToList();
         Customer customer;
         VehicleVersion vehicleVersion;
         CarPolicy carpolicy;
         using (var quotationConsumerService = new QuotationConsumerService())
         {
             var customerTask = quotationConsumerService.GetCustomer(quote.CustomerId, jwtToken);
             var vehicleTask = quotationConsumerService.GetVehicle(quote.VehicleVersionId, jwtToken);
             var carpolicyTask = quotationConsumerService.GetCarpolicy(quote.CarPolicyId.Value, jwtToken);
             await Task.WhenAll(customerTask, vehicleTask, carpolicyTask);

             customer = customerTask.Result;
             vehicleVersion = vehicleTask.Result;
             carpolicy = carpolicyTask.Result;
         }



         _logger.Debug("carpolicy fetched");
         dynamic viewModel = new ExpandoObject();
         viewModel.Duration = quote.Duration;
         //if (viewModel.IncomeTaxRate == null)
         viewModel.IncomeTaxRate = customer.IncomeTaxRate;


         var perquisteTable = new StringBuilder();
         perquisteTable.Append("<div align='center'>Perquisite Value for company provided <br/> car and driver.</div><table><thead class='thead-inverse' style='background-color:#20BADA'><tr><th>Type of Car</th><th>Rate of tax</th></tr></thead><tbody>");
         if (qttPerquiste.QTTDetails != null)
         {
             foreach (var detail in qttPerquiste.QTTDetails)
             {
                 perquisteTable.Append($"<tr><td>{detail.PARAMETER_CODE}</td> <td> {detail.PARAMETER_VALUE} </ td ></ tr > ");
             }
         }
         perquisteTable.Append("</tbody></table>");
         viewModel.PerquisteTable = perquisteTable.ToString();
         _logger.Debug("currency fetched");




         var driverReim = QuoteDatas.FirstOrDefault(u => u.QUOP_CODE == QuoteConstants.DRIVER_REIMBURSEMENT
                                 && u.QUOT_ID == quote.QuoteId.ToString());
         _logger.Debug("driverReim fetched");
         if (driverReim != null)
         {
             viewModel.AnnualDriverReimbursement = decimal.Parse(driverReim?.QUOD_VALUE);
         }
         else
         {
             viewModel.AnnualDriverReimbursement = 0;
         }
         var fuelReim = QuoteDatas.FirstOrDefault(u => u.QUOP_CODE == QuoteConstants.FUEL_REIMBURSEMENT
                             && u.QUOT_ID == quote.QuoteId.ToString());
         _logger.Debug("fuelReim fetched");
         if (fuelReim != null && !string.IsNullOrEmpty(fuelReim.QUOD_VALUE))
         {
             viewModel.AnnualFuelReimbursement = decimal.Parse(fuelReim.QUOD_VALUE);
         }
         else
         {
             viewModel.AnnualFuelReimbursement = 0;
         }

         viewModel.QuoteId = quoteId;
         viewModel.IsQuotationSaved = !string.IsNullOrEmpty(quote.QuoteNumber.Trim());
         viewModel.VehicleMake = vehicleVersion.VehicleMake.VehicleMakeName + " " + vehicleVersion.VehicleModel.VehicleModelName + " " + vehicleVersion.VersionName;
         viewModel.LeaseInstallment = quote.MonthlyLease;
         viewModel.EngineCapacity = vehicleVersion.Engine;
         if (qttPerquiste.QTTDetails != null)
         {
             var perquisiteForDriver = qttPerquiste.QTTDetails.FirstOrDefault(f => f.PARAMETER_CODE == QuoteConstants.PERQUISTE_VALUE_FOR_DRIVER);
             if (perquisiteForDriver != null && decimal.TryParse(perquisiteForDriver.PARAMETER_VALUE, out var perquisiteValueForDriver))
             {
                 viewModel.PerquisiteValueForDriver = perquisiteValueForDriver;
                 _logger.Debug("PerquisiteValueForDriver fetched");
             }
             else
             {
                 _logger.Warn("PerquisiteValueForDriver not found or invalid format");
             }

             var perquisiteSearchText = viewModel.EngineCapacity <= 1600 ? QuoteConstants.ENGINE_CAPACITY_LESS_THAN_1600 : QuoteConstants.ENGINE_CAPACITY_GREATER_THAN_1600;
             _logger.Debug("PerquisiteValuePerMonth fetch started");


             var perquisiteValuePerMonth = qttPerquiste.QTTDetails.FirstOrDefault(f => f.PARAMETER_CODE == perquisiteSearchText);
             if (perquisiteValuePerMonth != null && decimal.TryParse(perquisiteValuePerMonth.PARAMETER_VALUE, out var valuePerMonth))
             {
                 viewModel.PerquisiteValuePerMonth = valuePerMonth;
                 _logger.Debug("PerquisiteValuePerMonth fetched");
             }
             else
             {
                 _logger.Warn("PerquisiteValuePerMonth not found or invalid format");
             }

             var amountLessThan1600 = qttPerquiste.QTTDetails.FirstOrDefault(f => f.PARAMETER_CODE == QuoteConstants.ENGINE_CAPACITY_LESS_THAN_1600);
             if (amountLessThan1600 != null && decimal.TryParse(amountLessThan1600.PARAMETER_VALUE, out var lessThan1600Value))
             {
                 viewModel.AmountLessthan1600CC = lessThan1600Value;
             }
             else
             {
                 _logger.Warn("AmountLessThan1600CC not found or invalid format");
             }


             var amountGreaterThan1600 = qttPerquiste.QTTDetails.FirstOrDefault(f => f.PARAMETER_CODE == QuoteConstants.ENGINE_CAPACITY_GREATER_THAN_1600);
             if (amountGreaterThan1600 != null && decimal.TryParse(amountGreaterThan1600.PARAMETER_VALUE, out var greaterThan1600Value))
             {
                 viewModel.AmountGreaterthan1600CC = greaterThan1600Value;
             }
             else
             {
                 _logger.Warn("AmountGreaterThan1600CC not found or invalid format");
             }
         }
         else
         {
             viewModel.PerquisiteValueForDriver = 0;
             viewModel.PerquisiteValuePerMonth = 0;
             viewModel.AmountLessthan1600CC = 0;
             viewModel.AmountGreaterthan1600CC = 0;

         }

         var monthlyEffectiveCost = QuoteDatas.FirstOrDefault(u => u.QUOP_CODE == QuoteConstants.MONTHLY_EFFECTIVE_COST && u.QUOT_ID == quote.QuoteId.ToString());
         if (monthlyEffectiveCost != null)
         {
             viewModel.SavingOverEmpLoanOption = double.Parse(monthlyEffectiveCost.QUOD_VALUE);
             _logger.Debug("PerquisiteValuePerMonth fetch end");
         }
         else
         {
             viewModel.SavingOverEmpLoanOption = 0;
         }
         return viewModel;
     }
     catch (Exception ex)
     {
         return null;
     }
 }


Refactor this method to reduce its Cognitive Complexity from 34 to the 15 allowed.


public async Task<dynamic> GetCashFlowSavings(int quoteId, string jwtToken, int countryId)
{
    _logger.Debug("CalculateCashFlowSavings method called");
    try
    {
        var quote = QuotationDataService.GetQuotation(quoteId, countryId);
        var qttPerquiste = QuotationDataService.GetQTTInformation(QuoteConstants.PERQUISTE);
        var quoteDataList = QuotationDataService.GetQuoteData(quoteId).ToList();

        dynamic viewModel = new ExpandoObject();
        viewModel.Duration = quote.Duration;

        await PopulateCustomerVehiclePolicyDetails(viewModel, quote, jwtToken);
        viewModel.IncomeTaxRate = ((Customer)viewModel.Customer).IncomeTaxRate;
        viewModel.QuoteId = quoteId;
        viewModel.IsQuotationSaved = !string.IsNullOrWhiteSpace(quote.QuoteNumber);
        viewModel.VehicleMake = GetVehicleMake(viewModel.Vehicle);
        viewModel.LeaseInstallment = quote.MonthlyLease;
        viewModel.EngineCapacity = ((VehicleVersion)viewModel.Vehicle).Engine;

        SetReimbursements(viewModel, quoteDataList, quote.QuoteId);
        viewModel.PerquisteTable = BuildPerquisiteTable(qttPerquiste);
        SetPerquisiteValues(viewModel, qttPerquiste, (int)viewModel.EngineCapacity);
        SetMonthlyEffectiveCost(viewModel, quoteDataList, quote.QuoteId);

        return viewModel;
    }
    catch (Exception ex)
    {
        _logger.Error("Error in GetCashFlowSavings", ex);
        return null;
    }
}



private async Task PopulateCustomerVehiclePolicyDetails(dynamic viewModel, Quotation quote, string jwtToken)
{
    using var quotationConsumerService = new QuotationConsumerService();
    var customerTask = quotationConsumerService.GetCustomer(quote.CustomerId, jwtToken);
    var vehicleTask = quotationConsumerService.GetVehicle(quote.VehicleVersionId, jwtToken);
    var carpolicyTask = quotationConsumerService.GetCarpolicy(quote.CarPolicyId.Value, jwtToken);

    await Task.WhenAll(customerTask, vehicleTask, carpolicyTask);

    viewModel.Customer = customerTask.Result;
    viewModel.Vehicle = vehicleTask.Result;
    viewModel.Policy = carpolicyTask.Result;

    _logger.Debug("Fetched customer, vehicle, and carpolicy");
}

private string GetVehicleMake(object vehicleObj)
{
    var vehicle = (VehicleVersion)vehicleObj;
    return $"{vehicle.VehicleMake.VehicleMakeName} {vehicle.VehicleModel.VehicleModelName} {vehicle.VersionName}";
}

private void SetReimbursements(dynamic viewModel, List<QuoteData> quoteDataList, int quoteId)
{
    viewModel.AnnualDriverReimbursement = GetDecimalValue(quoteDataList, QuoteConstants.DRIVER_REIMBURSEMENT, quoteId);
    viewModel.AnnualFuelReimbursement = GetDecimalValue(quoteDataList, QuoteConstants.FUEL_REIMBURSEMENT, quoteId);
    _logger.Debug("Reimbursements set");
}

private decimal GetDecimalValue(List<QuoteData> dataList, string code, int quoteId)
{
    var item = dataList.FirstOrDefault(u => u.QUOP_CODE == code && u.QUOT_ID == quoteId.ToString());
    return item != null && decimal.TryParse(item.QUOD_VALUE, out var value) ? value : 0;
}

private string BuildPerquisiteTable(QTTInformation qttPerquiste)
{
    var table = new StringBuilder("<div align='center'>Perquisite Value for company provided <br/> car and driver.</div>");
    table.Append("<table><thead class='thead-inverse' style='background-color:#20BADA'><tr><th>Type of Car</th><th>Rate of tax</th></tr></thead><tbody>");
    
    if (qttPerquiste?.QTTDetails != null)
    {
        foreach (var detail in qttPerquiste.QTTDetails)
        {
            table.Append($"<tr><td>{detail.PARAMETER_CODE}</td><td>{detail.PARAMETER_VALUE}</td></tr>");
        }
    }

    table.Append("</tbody></table>");
    return table.ToString();
}

private void SetPerquisiteValues(dynamic viewModel, QTTInformation qtt, int engineCapacity)
{
    var details = qtt?.QTTDetails;
    if (details == null)
    {
        SetDefaultPerquisites(viewModel);
        return;
    }

    viewModel.PerquisiteValueForDriver = TryGetDecimal(details, QuoteConstants.PERQUISTE_VALUE_FOR_DRIVER);
    var capacityCode = engineCapacity <= 1600 ? QuoteConstants.ENGINE_CAPACITY_LESS_THAN_1600 : QuoteConstants.ENGINE_CAPACITY_GREATER_THAN_1600;
    viewModel.PerquisiteValuePerMonth = TryGetDecimal(details, capacityCode);
    viewModel.AmountLessthan1600CC = TryGetDecimal(details, QuoteConstants.ENGINE_CAPACITY_LESS_THAN_1600);
    viewModel.AmountGreaterthan1600CC = TryGetDecimal(details, QuoteConstants.ENGINE_CAPACITY_GREATER_THAN_1600);

    _logger.Debug("Perquisite values set");
}

private void SetDefaultPerquisites(dynamic viewModel)
{
    viewModel.PerquisiteValueForDriver = 0;
    viewModel.PerquisiteValuePerMonth = 0;
    viewModel.AmountLessthan1600CC = 0;
    viewModel.AmountGreaterthan1600CC = 0;
    _logger.Warn("Default perquisite values set due to missing data");
}

private decimal TryGetDecimal(IEnumerable<QTTDetail> details, string code)
{
    var item = details.FirstOrDefault(f => f.PARAMETER_CODE == code);
    return item != null && decimal.TryParse(item.PARAMETER_VALUE, out var value) ? value : 0;
}

private void SetMonthlyEffectiveCost(dynamic viewModel, List<QuoteData> quoteDataList, int quoteId)
{
    var item = quoteDataList.FirstOrDefault(u => u.QUOP_CODE == QuoteConstants.MONTHLY_EFFECTIVE_COST && u.QUOT_ID == quoteId.ToString());
    viewModel.SavingOverEmpLoanOption = item != null && double.TryParse(item.QUOD_VALUE, out var value) ? value : 0;
    _logger.Debug("Monthly effective cost set");
}


